type UserId = principal;
type User = 
 record {
   completedCourses: vec CourseId;
   id: UserId;
   nfts: vec NFTId;
   skills: vec text;
   tokens: nat;
   username: text;
 };
type Result_5 = 
 variant {
   err: text;
   ok: CourseId;
 };
type Result_4 = 
 variant {
   err: text;
   ok;
 };
type Result_3 = 
 variant {
   err: text;
   ok: Course;
 };
type Result_2 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_1 = 
 variant {
   err: text;
   ok: User;
 };
type Result = 
 variant {
   err: text;
   ok: vec NFT;
 };
type NFTId = nat;
type NFT = 
 record {
   courseId: CourseId;
   id: NFTId;
   name: text;
 };
type CourseId = nat;
type Course = 
 record {
   description: text;
   id: CourseId;
   title: text;
   tokenReward: nat;
 };
service : {
  completeCourse: (CourseId) -> (Result_4);
  createCourse: (text, text, nat) -> (Result_5);
  createUser: (text) -> (Result_4);
  getCourse: (CourseId) -> (Result_3) query;
  getTokenBalance: (UserId) -> (Result_2) query;
  getUser: (UserId) -> (Result_1) query;
  getUserNFTs: (UserId) -> (Result) query;
}
